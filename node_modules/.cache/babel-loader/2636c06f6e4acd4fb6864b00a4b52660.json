{"ast":null,"code":"// Replicating Bootstrap's box shadow, rotated to match the angle of rotated elements\n// @link https://jsfiddle.net/dg78usmt/102/\nfunction angledShadow(element) {\n  var thisClassName = element.className; // get angle from CSS\n\n  var angle = 0;\n\n  if (thisClassName == \"sticky sticky-a\") {\n    var angle = -4;\n  } else if (thisClassName == \"sticky sticky-b\") {\n    var angle = 2;\n  } // can't dynamically get angle because they are hidden by default\n  //let style = window.getComputedStyle(element); console.log(style);\n  //let transformed = style.getPropertyValue(\"transform\"); console.log(transformed);\n  //let angle = convertToAngle(transformed);\n  // compute offset of shadow\n\n\n  var shadowOffset = 0.5;\n  var shadowX = Math.sin(angle * (Math.PI / 180) * shadowOffset);\n  var shadowY = Math.cos(angle * (Math.PI / 180) * shadowOffset);\n  var shadowX2 = Number.parseFloat(shadowX).toFixed(3);\n  var shadowY2 = Number.parseFloat(shadowY).toFixed(3); // enable shadow\n\n  var boxShadowMessage = shadowX2 + \"rem \" + shadowY2 + \"rem 1rem rgba(0,0,0,0.15)\";\n  element.style.boxShadow = boxShadowMessage;\n  console.log(angle + \" \" + boxShadowMessage);\n\n  function convertToAngle(matrix) {\n    var values = matrix.split('(')[1],\n        values = values.split(')')[0],\n        values = values.split(',');\n    var sin = values[1]; // 0.5\n\n    return Math.round(Math.asin(sin) * (180 / Math.PI));\n  }\n}\n\nfunction enableShadows() {\n  // get elements to give shadow\n  var rotatedElements = $(\".sticky\");\n  console.log(rotatedElements); // loop through elements\n\n  for (const element of rotatedElements) {\n    console.log(element.parentNode.parentNode.parentNode.id);\n    angledShadow(element);\n  }\n}\n\nwindow.onload = enableShadows();","map":{"version":3,"sources":["/Users/Ben/Documents/react-playing/site-test/src/Rotate-shadows.js"],"names":["angledShadow","element","thisClassName","className","angle","shadowOffset","shadowX","Math","sin","PI","shadowY","cos","shadowX2","Number","parseFloat","toFixed","shadowY2","boxShadowMessage","style","boxShadow","console","log","convertToAngle","matrix","values","split","round","asin","enableShadows","rotatedElements","$","parentNode","id","window","onload"],"mappings":"AAAA;AACA;AAEA,SAASA,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,MAAIC,aAAa,GAAGD,OAAO,CAACE,SAA5B,CAD6B,CAG/B;;AACE,MAAIC,KAAK,GAAG,CAAZ;;AACA,MAAIF,aAAa,IAAI,iBAArB,EAAwC;AACtC,QAAIE,KAAK,GAAG,CAAC,CAAb;AACD,GAFD,MAEO,IAAIF,aAAa,IAAI,iBAArB,EAAwC;AAC7C,QAAIE,KAAK,GAAG,CAAZ;AACD,GAT4B,CAW7B;AACA;AACA;AACA;AAEA;;;AACA,MAAIC,YAAY,GAAG,GAAnB;AACA,MAAIC,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAK,IAAIG,IAAI,CAACE,EAAL,GAAU,GAAd,CAAL,GAA0BJ,YAAnC,CAAd;AACA,MAAIK,OAAO,GAAGH,IAAI,CAACI,GAAL,CAASP,KAAK,IAAIG,IAAI,CAACE,EAAL,GAAU,GAAd,CAAL,GAA0BJ,YAAnC,CAAd;AAEA,MAAIO,QAAQ,GAAGC,MAAM,CAACC,UAAP,CAAkBR,OAAlB,EAA2BS,OAA3B,CAAmC,CAAnC,CAAf;AACA,MAAIC,QAAQ,GAAGH,MAAM,CAACC,UAAP,CAAkBJ,OAAlB,EAA2BK,OAA3B,CAAmC,CAAnC,CAAf,CAtB6B,CAwB7B;;AACA,MAAIE,gBAAgB,GAAGL,QAAQ,GAAG,MAAX,GAAoBI,QAApB,GAA+B,2BAAtD;AAEAf,EAAAA,OAAO,CAACiB,KAAR,CAAcC,SAAd,GAA0BF,gBAA1B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAK,GAAG,GAAR,GAAca,gBAA1B;;AAEA,WAASK,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,QAAIC,MAAM,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAb;AAAA,QACGD,MAAM,GAAGA,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkB,CAAlB,CADZ;AAAA,QAEGD,MAAM,GAAGA,MAAM,CAACC,KAAP,CAAa,GAAb,CAFZ;AAID,QAAIjB,GAAG,GAAGgB,MAAM,CAAC,CAAD,CAAhB,CAL+B,CAKV;;AAErB,WAAOjB,IAAI,CAACmB,KAAL,CAAWnB,IAAI,CAACoB,IAAL,CAAUnB,GAAV,KAAkB,MAAID,IAAI,CAACE,EAA3B,CAAX,CAAP;AACA;AACF;;AAED,SAASmB,aAAT,GAAyB;AACvB;AACA,MAAIC,eAAe,GAAGC,CAAC,CAAC,SAAD,CAAvB;AAEAV,EAAAA,OAAO,CAACC,GAAR,CAAYQ,eAAZ,EAJuB,CAMvB;;AACA,OAAK,MAAM5B,OAAX,IAAsB4B,eAAtB,EAAuC;AACrCT,IAAAA,OAAO,CAACC,GAAR,CAAYpB,OAAO,CAAC8B,UAAR,CAAmBA,UAAnB,CAA8BA,UAA9B,CAAyCC,EAArD;AACAhC,IAAAA,YAAY,CAACC,OAAD,CAAZ;AACD;AACF;;AAEDgC,MAAM,CAACC,MAAP,GAAgBN,aAAa,EAA7B","sourcesContent":["// Replicating Bootstrap's box shadow, rotated to match the angle of rotated elements\n// @link https://jsfiddle.net/dg78usmt/102/\n\nfunction angledShadow(element) {\n  var thisClassName = element.className;\n\n// get angle from CSS\n  var angle = 0\n  if (thisClassName == \"sticky sticky-a\") {\n    var angle = -4;\n  } else if (thisClassName == \"sticky sticky-b\") {\n    var angle = 2;\n  }\n\n  // can't dynamically get angle because they are hidden by default\n  //let style = window.getComputedStyle(element); console.log(style);\n  //let transformed = style.getPropertyValue(\"transform\"); console.log(transformed);\n  //let angle = convertToAngle(transformed);\n\n  // compute offset of shadow\n  var shadowOffset = 0.5;\n  var shadowX = Math.sin(angle * (Math.PI / 180) * shadowOffset);\n  var shadowY = Math.cos(angle * (Math.PI / 180) * shadowOffset);\n\n  var shadowX2 = Number.parseFloat(shadowX).toFixed(3);\n  var shadowY2 = Number.parseFloat(shadowY).toFixed(3);\n\n  // enable shadow\n  var boxShadowMessage = shadowX2 + \"rem \" + shadowY2 + \"rem 1rem rgba(0,0,0,0.15)\";\n\n  element.style.boxShadow = boxShadowMessage;\n  console.log(angle + \" \" + boxShadowMessage);\n\n  function convertToAngle(matrix) {\n    var values = matrix.split('(')[1],\n       values = values.split(')')[0],\n       values = values.split(',');\n  \n   var sin = values[1]; // 0.5\n  \n   return Math.round(Math.asin(sin) * (180/Math.PI));\n  }\n}\n\nfunction enableShadows() {\n  // get elements to give shadow\n  var rotatedElements = $(\".sticky\");\n\n  console.log(rotatedElements);\n\n  // loop through elements\n  for (const element of rotatedElements) {\n    console.log(element.parentNode.parentNode.parentNode.id);\n    angledShadow(element);\n  }\n}\n\nwindow.onload = enableShadows();"]},"metadata":{},"sourceType":"module"}